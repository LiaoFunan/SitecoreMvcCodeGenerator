<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SitecoreService.MvcCodeGenerator" #>
using E.SunBank.Foundation.SitecoreUtils.Extensions;
using Sitecore.Data;
using Sitecore.Data.Items;

namespace E.SunBank.Project.eFingo.Models.<#= ClassName #>
{
    /// <summary>
    /// <#= DisplayName #>
    /// </summary>
    public class <#= ClassName #>Item
    {
        /// <summary>
        /// ItemID
        /// </summary>
         public string Guid { get; set; }

    <# foreach (Item item in PropertyItems)
       { #>
    /// <summary>
        /// <#= item.DisplayName #> 
        /// </summary>
        public string  <#= item.ItemName #> { get; set; }
    <# } 
    #>

        /// <summary>
        /// DatasourceItem本體
        /// </summary>
        public Item DataItem { get; set; }
        /// <summary>
        /// 建構子1
        /// </summary>
        /// <param name="item"></param>
        public <#= ClassName #>Item(Item item)
        {
            <# foreach (Item item in PropertyItems)
            {
            if(item.Type == "Image")
            {#>
              this.<#= item.ItemName #> = item.ImageUrl(<#= ClassName #>Template.<#= item.ItemName #>);
             <# }
                else if(item.Type == "Multi-Line Text")
             { #>
              this.<#= item.ItemName #> =  item.GetMultiLineText(<#= ClassName #>Template.<#= item.ItemName #>, "<br>").ToHtmlString();
             <#}
               else if(item.Type == "Droplink")
             { #>
              Item linkItem = item?.TargetItem(<#= ClassName #>Template.<#= item.ItemName #>);
                if (linkItem != null)
                {
                    this.<#= item.ItemName #>  = linkItem[<#= ClassName #>Template.<#= item.LinkItemName #>];
                }
             <#} 
             else
             { #>
              this.<#= item.ItemName #> = item[<#= ClassName #>Template.<#= item.ItemName #>];
             <#} 
            }#>

            this.Guid = item.ID.ToString();
            this.DataItem = item;
        }
    }

    public class <#= ClassName #>Template
    {
        <# foreach (Item item in PropertyItems)
            { #>
            /// <summary>
            /// <#= item.DisplayName #> 
            /// </summary>
            public static readonly ID <#= item.ItemName #> = new ID("{<#= item.ItemID #>}");
        <# } 
        #>
    }
}

<#+
public List<Item> PropertyItems { get; set; }
public string ClassName { get; set; }
public string DisplayName { get; set; }
#>